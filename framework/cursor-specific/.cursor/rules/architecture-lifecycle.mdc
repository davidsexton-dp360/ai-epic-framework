
# Architecture Lifecycle Management

## AI Context Header
**When To Use**: Load when working with docs/architecture/ folder structure, managing architecture documentation, creating index files, or enforcing document size limits (700 lines). Essential for architecture documentation organization.

**Sample Queries**:
1. "How should I organize the new microservices architecture documentation?"
2. "This architecture document is over 700 lines - how do I split it properly?"
3. "Where should I place the new authentication architecture docs and update the index?"

## Framework Navigation
- **Main Navigation**: [user-rules-template.mdc](./user-rules-template.mdc) - Access other framework documentation
- **Epic Workflow**: [epic-workflow-instructions.mdc](./epic-workflow-instructions.mdc) - Architecture integration in workflows
- **Architecture Design**: [architecture-design-process.mdc](./architecture-design-process.mdc) - Design methodology and component templates
- **Execution Standards**: [general-execution-standards.mdc](./general-execution-standards.mdc) - Documentation quality standards

## 1. Architecture Folder Structure and Categorization

The `docs/architecture/` directory, located at the project root, is the **single source of truth** for all architecture‐related documentation. Use the following rules to guarantee clarity, extensibility, and discoverability.

### 1.1 Categorization
All architecture documents **must** be placed in logical sub-folders grouped by domain, category, or the tooling they describe.

**Existing example categories**
- `/docs/architecture/core/` – Foundational principles & cross-cutting concerns
- `/docs/architecture/database/` – Database design, schema, and data-access patterns
- `/docs/architecture/decisions/` – Architectural Decision Records (ADRs) & major design choices

**Creating new categories**
If a new architectural domain or key technology is introduced, create a new sub-folder, e.g.:
- `/docs/architecture/authentication/`
- `/docs/architecture/microservices/`

### 1.2 Naming Conventions
- **Folder names** – lowercase, kebab-case (e.g. `event-driven`, `user-management`)
- **Markdown files** – lowercase, kebab-case, clearly describing the content (`event-driven-architecture.md`)

### 1.3 AI / Human Discoverability
A logical folder structure and naming convention enables:
1. Rapid human navigation
2. Accurate AI semantic search & indexing

### 1.4 Mandatory `index.md` in Every Folder
Each directory **must** include an `index.md` that indexes all documents & child folders in a table with three columns:
| Domain | Description | Location |
|--------|-------------|----------|

**Purpose of `index.md`**
- Instant lookup for engineers
- Machine-readable overview for AI agents
- Clear guidance on where to place new docs

## 2. Architecture Document Content Guidelines
Every `.md` inside `/docs/architecture/` must follow this canonical structure:

```
# [Component / Topic Name]

**Status**: Existing | Planned | Deprecated  
**Last Updated**: YYYY-MM-DD  
**Stakeholders**: [Teams / Roles]  
**Related Docs**: [Links]

## Purpose
Explain the intent and scope.

## Key Principles
Enumerate governing principles.

## Components & Interactions
Describe main components and how they interact.

## Diagrams / Visuals
Reference or describe diagrams that aid understanding.

## Trade-offs & Justifications
Document the reasoning behind major decisions.

## Technical Details
- **Technology Stack**
- **Configuration & Env Vars**
- **Dependencies & Versions**
- **Testing Strategy**
- **Deployment Considerations**

## Quality Attributes
Discuss performance, scalability, security, reliability, maintainability.
```

## 3. Integration with Epic Workflow
- **Pre-Implementation** – Before any new Initiative/Epic/Phase/Step starts, consult this file and relevant `index.md`s.
- **During Implementation** – Align all code & config with documented architecture.
- **Post-Completion** – Generate or update docs for any architectural change.

## 4. Document Size Management – 700 Line Hard Limit
- Monitor size via `wc -l file.md`.
- If >700 lines, split into focused sub-docs and update parent `index.md`.

## 5. Helpful CLI Snippets
```bash
# Find all architecture docs
find docs/architecture/ -name "*.md" -type f

# Check document sizes
find docs/architecture/ -name "*.md" -exec wc -l {} + | sort -n

# Find docs over 700 lines
find docs/architecture/ -name "*.md" -exec sh -c 'if [ $(wc -l < "$1") -gt 700 ]; then echo "$1: $(wc -l < "$1") lines"; fi' _ {} \;

# Create new architecture category
mkdir -p docs/architecture/[new-category]
touch docs/architecture/[new-category]/index.md

# Update all index files
find docs/architecture/ -name "index.md" -exec echo "Updating {}" \;
```

## 6. Document Lifecycle States
- **Existing**: Currently implemented and active
- **Planned**: Approved for future implementation
- **Deprecated**: No longer recommended, migration path available

## 7. Quality Assurance Checklist
- [ ] Document follows canonical structure
- [ ] Size is under 700 lines
- [ ] Properly categorized in sub-folder
- [ ] Listed in parent `index.md`
- [ ] Status and last updated date are current
- [ ] Stakeholders and related docs are accurate
- [ ] Technical details are complete and current
- [ ] Quality attributes are addressed
- [ ] Diagrams/visuals are referenced or described
- [ ] Trade-offs and justifications are documented

## 8. Integration with Other Framework Components

### Epic Workflow Integration
- Reference architecture docs in task `INDEX.md` files
- Update architecture docs when implementing architectural changes
- Create new architecture docs for new architectural components

### Architecture Design Process Integration
- Use architecture design process for creating new architecture docs
- Apply quality attribute analysis to architecture documentation
- Follow research methodology for architectural decisions

### Execution Standards Integration
- Apply documentation quality standards to all architecture docs
- Use file navigation and verification procedures
- Follow proper documentation practices and procedures

## 9. Success Metrics
- **Documentation Coverage**: All architectural components are documented
- **Documentation Quality**: All docs follow canonical structure and quality standards
- **Documentation Currency**: All docs are up-to-date and accurate
- **Documentation Discoverability**: All docs are properly categorized and indexed
- **Documentation Maintainability**: All docs are under size limits and well-organized

This architecture lifecycle management system ensures that all architectural documentation is properly organized, maintained, and accessible for both human engineers and AI agents.


---
